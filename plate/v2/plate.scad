// Parametric keyboard plate generator for Terminus Est
// Based on keyboard-layout.json

// === PARAMETERS ===
plate_thickness = 1.5;  // Plate thickness in mm
switch_cutout_size = 14;  // MX switch cutout (14x14mm)
unit = 19.05;  // 1U key spacing in mm
stabilizer_spacing = 11.95;  // Cherry stabilizer spacing

// Plate outline settings
plate_padding = 5;  // Extra material around switches
corner_radius = 3;  // Rounded corners

// Screw hole settings
screw_hole_diameter = 3.2;  // M3 screw clearance hole
screw_hole_inset = 5;  // Distance from corner to screw hole center

// === SWITCH POSITIONS FROM KLE ===
// Format: [x_pos, y_pos, width] in keyboard units (1U = 19.05mm)

// Generated by kle-to-openscad.py from keyboard-layout.json
// Total switches: 76
// Dimensions: 21.75U x 7U
switch_positions = [
    // Row 0
    [0, 0, 1], [1, 0, 1], [2, 0, 1], [3, 0, 1], [4, 0, 1], [5, 0, 1], [6, 0, 1], [7, 0, 1],

    // Row 1
    [0.5, 1, 1], [1.5, 1, 1], [2.5, 1, 1], [3.5, 1, 1], [4.5, 1, 1], [5.5, 1, 1], [6.5, 1, 1], [14.0, 1, 1], [15.0, 1, 1], [16.0, 1, 1], [17.0, 1, 1], [18.0, 1, 1], [19.0, 1, 1], [20.0, 1, 1],

    // Row 2
    [0, 2, 1], [1, 2, 1], [2, 2, 1], [3, 2, 1], [4, 2, 1], [5, 2, 1], [6, 2, 1], [8.5, 2, 1], [11.75, 2, 1], [13.75, 2, 1], [14.75, 2, 1], [15.75, 2, 1], [16.75, 2, 1], [17.75, 2, 1], [18.75, 2, 1], [19.75, 2, 1], [20.75, 2, 1],

    // Row 3
    [0.25, 3, 1], [1.25, 3, 1], [2.25, 3, 1], [3.25, 3, 1], [4.25, 3, 1], [5.25, 3, 1], [6.25, 3, 1], [8.5, 3, 1], [11.75, 3, 1], [14.0, 3, 1], [15.0, 3, 1], [16.0, 3, 1], [17.0, 3, 1], [18.0, 3, 1], [19.0, 3, 1], [20.0, 3, 1],

    // Row 4
    [0.75, 4, 1], [1.75, 4, 1], [2.75, 4, 1], [3.75, 4, 1], [4.75, 4, 1], [5.75, 4, 1], [6.75, 4, 1], [8.5, 4, 1], [11.75, 4, 1], [13.5, 4, 1], [14.5, 4, 1], [15.5, 4, 1], [16.5, 4, 1], [17.5, 4, 1], [18.5, 4, 1], [19.5, 4, 1],

    // Row 5
    [5.25, 5, 1], [7.25, 5, 1], [13.0, 5, 1], [15.0, 5, 1],

    // Row 6
    [10.125, 6, 1]
];

// === MODULES ===

// Single switch cutout
module switch_cutout(x, y) {
    translate([x * unit, -y * unit, -0.1])
        cube([switch_cutout_size, switch_cutout_size, plate_thickness + 0.2], center=true);
}

// All switch cutouts
module all_switches() {
    for (pos = switch_positions) {
        switch_cutout(pos[0], pos[1]);
    }
}

// Calculate bounding box for plate outline
function get_min_x() = min([for (pos = switch_positions) pos[0]]);
function get_max_x() = max([for (pos = switch_positions) pos[0]]);
function get_min_y() = min([for (pos = switch_positions) pos[1]]);
function get_max_y() = max([for (pos = switch_positions) pos[1]]);

// Plate outline with rounded corners
module plate_outline() {
    min_x = get_min_x() * unit - unit/2 - plate_padding;
    max_x = get_max_x() * unit + unit/2 + plate_padding;
    min_y = -get_max_y() * unit - unit/2 - plate_padding;
    max_y = -get_min_y() * unit + unit/2 + plate_padding;

    width = max_x - min_x;
    height = max_y - min_y;

    translate([min_x + width/2, min_y + height/2, 0])
        linear_extrude(height=plate_thickness, center=true)
            offset(r=corner_radius)
                offset(r=-corner_radius)
                    square([width, height], center=true);
}

// Screw holes at corners
module screw_holes() {
    min_x = get_min_x() * unit - unit/2 - plate_padding;
    max_x = get_max_x() * unit + unit/2 + plate_padding;
    min_y = -get_max_y() * unit - unit/2 - plate_padding;
    max_y = -get_min_y() * unit + unit/2 + plate_padding;

    // Four corners
    positions = [
        [min_x + screw_hole_inset, max_y - screw_hole_inset],  // Top left
        [max_x - screw_hole_inset, max_y - screw_hole_inset],  // Top right
        [min_x + screw_hole_inset, min_y + screw_hole_inset],  // Bottom left
        [max_x - screw_hole_inset, min_y + screw_hole_inset]   // Bottom right
    ];

    for (pos = positions) {
        translate([pos[0], pos[1], 0])
            cylinder(d=screw_hole_diameter, h=plate_thickness + 1, center=true, $fn=32);
    }
}

// === MAIN PLATE ===
difference() {
    plate_outline();
    all_switches();
    screw_holes();
}

// === DEBUG & ALIGNMENT ===

// Debug: Show switch centers
// for (pos = switch_positions) {
//     translate([pos[0] * unit, -pos[1] * unit, plate_thickness/2])
//         cylinder(d=1, h=plate_thickness*2, center=true);
// }

// Import PCB for alignment verification
// Comment out if it slows down rendering
translate([0, 0, -plate_thickness/2 - 1.6])  // PCB is 1.6mm thick, place below plate
    import("../../pcb/kicad/keyboard.wrl");
